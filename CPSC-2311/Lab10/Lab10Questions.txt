CPSC 2310 Spring 2021
Lab 10 Questions

1. As discussed in the lab writeup, the locations for min and max are 
	-8(%rbq) and -4(%rbq), which are 4 apart. How far apart would these
	addresses be if min and max were chars instead of ints? Why?
	What if they were doubles? 
	(You can test this)

They would be 1 apart if they were chars instead of ints. And they would be 8 apart if they were
Doubles instead of ints


2. Alter the values assigned to min and max in the driver.s file
	| min | max | result
	=======================
	| 0   | 10  | 0 1 2 3 4 5 6 7 8 9 10
	| 5   | 10  | 5 6 7 8 9 10
	| 10  | 0   | No Output
	| -5  | 1   | -5 -4 -3 -2 -1 0 1

3. What are these lines doing in driver.s?

	movl  -8(%rbp), %eax # min, tmp89
   	movl  %eax, -12(%rbp)   # tmp89, i

This is taking min moving it to register eax then taking the value inside
eax and moving it into a temporary variable i that's inside the for loop


4. What happens when you change the jump conditional to jl instead of jle?
	What if you change it to jg? Why?

It prints out 0 1 2 3 4 5 6 7 8 9 instead of 10 because its less than instead of less than or equal too. When you change it to jg it prints nothing because it jumps when its greater than which is always false. 


5. The last line in .L3 handles the for loop change (i++)
   The third line in .L2  handles the for loop conditional (i < max)
(The first two lines in .L2 handle the initialization, but we won't alter that)
	
Fill in the resulting loop and print out when we change the x86 commands 
(*some of these create infinite loops so testing directly may take awhile, 
try to logic through it first. If there is an infinite loop, write "infinite
loop" as the printout)

	.L3         | .L2  |        for loop             |    printout
===========================================================================
addl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i++ ) | 0 1 3 4....10
subl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i-- ) | infinite loop
addl  $2, -12(%rbp) | jl   | for(i = min; i < max; i+=2 ) | 0 2 4 6 8 
mull  $2, -12(%rbp) | jge  | for(i = min; i >=max; i*=2 ) | no output
addl  $1, -8(%rbp)  | jle  | for(i = min; i <=max; min++) | infinite loop


6. lsl r4, r3, #2 is the same as r4 = 4 * r3. Explain

	lsl stands for logical shift left. So we are logically shifting r3 << 2 and storing that into    	r4. Shifting by two is the same thing as multiplying by what ever amount we are shifting which in this case is 2. So 2^2 * r3 == r3 << 2

   ldr r5, [r0, r4] is the same as r5 = arr[i] in this case. How does this work

	store the value of the memory address in r0 offset by r4. This is equivalent to lets say our 
Pointer to r0 is a variable called x. Its the same thing as x + 4, assuming r4 has the value 4 stored inside of it



7. In the beginning of a function in ARM, we push lr onto the stack. At the
   end, we pop that value into pc. Why is this important? What does it 
   accomplish?	

Lr is the link register which is a special register. Lr holds the return address of a function call. The return address is loaded into PC so that the execution of whatever calling program can be resumed with no issues. You pop LR onto the stack because we need LR saved. If we didn't then we wouldn't know where our return address was 
